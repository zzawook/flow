// Mocks generated by Mockito 5.4.5 from annotations
// in flow_mobile/test/mocks/repository_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flow_mobile/domain/entities/bank.dart' as _i3;
import 'package:flow_mobile/domain/entities/bank_account.dart' as _i5;
import 'package:flow_mobile/domain/entities/date_spending_statistics.dart'
    as _i6;
import 'package:flow_mobile/domain/entities/notification.dart' as _i19;
import 'package:flow_mobile/domain/entities/notification_setting.dart' as _i4;
import 'package:flow_mobile/domain/entities/transaction.dart' as _i9;
import 'package:flow_mobile/domain/entities/transfer_receivable.dart' as _i17;
import 'package:flow_mobile/domain/entities/user.dart' as _i2;
import 'package:flow_mobile/domain/repositories/account_repository.dart'
    as _i14;
import 'package:flow_mobile/domain/repositories/auth_repository.dart' as _i20;
import 'package:flow_mobile/domain/repositories/bank_repository.dart' as _i11;
import 'package:flow_mobile/domain/repositories/notification_repository.dart'
    as _i18;
import 'package:flow_mobile/domain/repositories/settings_repository.dart'
    as _i12;
import 'package:flow_mobile/domain/repositories/spending_repository.dart'
    as _i15;
import 'package:flow_mobile/domain/repositories/transaction_repository.dart'
    as _i7;
import 'package:flow_mobile/domain/repositories/transfer_repository.dart'
    as _i16;
import 'package:flow_mobile/domain/repositories/user_repository.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBank_1 extends _i1.SmartFake implements _i3.Bank {
  _FakeBank_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationSetting_2 extends _i1.SmartFake
    implements _i4.NotificationSetting {
  _FakeNotificationSetting_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBankAccount_3 extends _i1.SmartFake implements _i5.BankAccount {
  _FakeBankAccount_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateSpendingStatistics_4 extends _i1.SmartFake
    implements _i6.DateSpendingStatistics {
  _FakeDateSpendingStatistics_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i7.TransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i9.Transaction>> getTransactions(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [date],
        ),
        returnValue:
            _i8.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i8.Future<List<_i9.Transaction>>);

  @override
  _i8.Future<List<_i9.Transaction>> getTransactionsFromTo(
    DateTime? fromDate,
    DateTime? toDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsFromTo,
          [
            fromDate,
            toDate,
          ],
        ),
        returnValue:
            _i8.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i8.Future<List<_i9.Transaction>>);

  @override
  _i8.Future<void> addTransaction(_i9.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [transaction],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> clearTransactions() => (super.noSuchMethod(
        Invocation.method(
          #clearTransactions,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i9.Transaction>> getAllTransactions() => (super.noSuchMethod(
        Invocation.method(
          #getAllTransactions,
          [],
        ),
        returnValue:
            _i8.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i8.Future<List<_i9.Transaction>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i10.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.User> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i8.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i8.Future<_i2.User>);

  @override
  _i8.Future<void> updateUser(_i2.User? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteUser() => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [BankRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBankRepository extends _i1.Mock implements _i11.BankRepository {
  MockBankRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i3.Bank>> getBanks() => (super.noSuchMethod(
        Invocation.method(
          #getBanks,
          [],
        ),
        returnValue: _i8.Future<List<_i3.Bank>>.value(<_i3.Bank>[]),
      ) as _i8.Future<List<_i3.Bank>>);

  @override
  _i8.Future<_i3.Bank> getBank(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getBank,
          [name],
        ),
        returnValue: _i8.Future<_i3.Bank>.value(_FakeBank_1(
          this,
          Invocation.method(
            #getBank,
            [name],
          ),
        )),
      ) as _i8.Future<_i3.Bank>);
}

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i12.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> setLanguage(String? language) => (super.noSuchMethod(
        Invocation.method(
          #setLanguage,
          [language],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> getLanguage() => (super.noSuchMethod(
        Invocation.method(
          #getLanguage,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #getLanguage,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<void> setTheme(String? theme) => (super.noSuchMethod(
        Invocation.method(
          #setTheme,
          [theme],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> getTheme() => (super.noSuchMethod(
        Invocation.method(
          #getTheme,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #getTheme,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<void> setFontScale(double? fontScale) => (super.noSuchMethod(
        Invocation.method(
          #setFontScale,
          [fontScale],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<double> getFontScale() => (super.noSuchMethod(
        Invocation.method(
          #getFontScale,
          [],
        ),
        returnValue: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);

  @override
  _i8.Future<void> setNotificationSetting(
          _i4.NotificationSetting? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #setNotificationSetting,
          [notification],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.NotificationSetting> getNotificationSetting() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotificationSetting,
          [],
        ),
        returnValue: _i8.Future<_i4.NotificationSetting>.value(
            _FakeNotificationSetting_2(
          this,
          Invocation.method(
            #getNotificationSetting,
            [],
          ),
        )),
      ) as _i8.Future<_i4.NotificationSetting>);

  @override
  _i8.Future<void> setDisplayBalanceOnHome(bool? displayBalanceOnHome) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDisplayBalanceOnHome,
          [displayBalanceOnHome],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> getDisplayBalanceOnHome() => (super.noSuchMethod(
        Invocation.method(
          #getDisplayBalanceOnHome,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i14.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i5.BankAccount>> getBankAccounts() => (super.noSuchMethod(
        Invocation.method(
          #getBankAccounts,
          [],
        ),
        returnValue:
            _i8.Future<List<_i5.BankAccount>>.value(<_i5.BankAccount>[]),
      ) as _i8.Future<List<_i5.BankAccount>>);

  @override
  _i8.Future<_i5.BankAccount> getBankAccount(String? accountNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBankAccount,
          [accountNumber],
        ),
        returnValue: _i8.Future<_i5.BankAccount>.value(_FakeBankAccount_3(
          this,
          Invocation.method(
            #getBankAccount,
            [accountNumber],
          ),
        )),
      ) as _i8.Future<_i5.BankAccount>);

  @override
  _i8.Future<_i5.BankAccount> createBankAccount(_i5.BankAccount? bankAccount) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBankAccount,
          [bankAccount],
        ),
        returnValue: _i8.Future<_i5.BankAccount>.value(_FakeBankAccount_3(
          this,
          Invocation.method(
            #createBankAccount,
            [bankAccount],
          ),
        )),
      ) as _i8.Future<_i5.BankAccount>);

  @override
  _i8.Future<_i5.BankAccount> updateBankAccount(_i5.BankAccount? bankAccount) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBankAccount,
          [bankAccount],
        ),
        returnValue: _i8.Future<_i5.BankAccount>.value(_FakeBankAccount_3(
          this,
          Invocation.method(
            #updateBankAccount,
            [bankAccount],
          ),
        )),
      ) as _i8.Future<_i5.BankAccount>);

  @override
  _i8.Future<void> deleteBankAccount(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBankAccount,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> clearBankAccounts() => (super.noSuchMethod(
        Invocation.method(
          #clearBankAccounts,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [SpendingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpendingRepository extends _i1.Mock
    implements _i15.SpendingRepository {
  MockSpendingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.DateSpendingStatistics> getSpending(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpending,
          [date],
        ),
        returnValue: _i8.Future<_i6.DateSpendingStatistics>.value(
            _FakeDateSpendingStatistics_4(
          this,
          Invocation.method(
            #getSpending,
            [date],
          ),
        )),
      ) as _i8.Future<_i6.DateSpendingStatistics>);

  @override
  _i8.Future<List<_i6.DateSpendingStatistics>> getSpendingRange(
    DateTime? fromDate,
    DateTime? toDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpendingRange,
          [
            fromDate,
            toDate,
          ],
        ),
        returnValue: _i8.Future<List<_i6.DateSpendingStatistics>>.value(
            <_i6.DateSpendingStatistics>[]),
      ) as _i8.Future<List<_i6.DateSpendingStatistics>>);

  @override
  _i8.Future<void> createSpending(_i6.DateSpendingStatistics? spending) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSpending,
          [spending],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateSpending(_i6.DateSpendingStatistics? spending) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSpending,
          [spending],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteSpending(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #deleteSpending,
          [date],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<String>> getSpendingCategories() => (super.noSuchMethod(
        Invocation.method(
          #getSpendingCategories,
          [],
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);
}

/// A class which mocks [TransferRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransferRepository extends _i1.Mock
    implements _i16.TransferRepository {
  MockTransferRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i17.TransferReceivable>> getTransferReceivables() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransferReceivables,
          [],
        ),
        returnValue: _i8.Future<List<_i17.TransferReceivable>>.value(
            <_i17.TransferReceivable>[]),
      ) as _i8.Future<List<_i17.TransferReceivable>>);

  @override
  _i8.Future<void> addTransferReceivable(
          _i17.TransferReceivable? transferReceivable) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransferReceivable,
          [transferReceivable],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> clearTransferReceivables() => (super.noSuchMethod(
        Invocation.method(
          #clearTransferReceivables,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> removeTransferReceivable(
          _i17.TransferReceivable? transferReceivable) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTransferReceivable,
          [transferReceivable],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [NotificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRepository extends _i1.Mock
    implements _i18.NotificationRepository {
  MockNotificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> addNotification(_i19.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNotification,
          [notification],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> clearNotifications() => (super.noSuchMethod(
        Invocation.method(
          #clearNotifications,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i19.Notification>> getNotifications() => (super.noSuchMethod(
        Invocation.method(
          #getNotifications,
          [],
        ),
        returnValue:
            _i8.Future<List<_i19.Notification>>.value(<_i19.Notification>[]),
      ) as _i8.Future<List<_i19.Notification>>);

  @override
  _i8.Future<void> markNotificationAsRead(int? id) => (super.noSuchMethod(
        Invocation.method(
          #markNotificationAsRead,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> markAllNotificationsAsRead() => (super.noSuchMethod(
        Invocation.method(
          #markAllNotificationsAsRead,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteNotification(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNotification,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i20.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> getAccessTokenFromLocal() => (super.noSuchMethod(
        Invocation.method(
          #getAccessTokenFromLocal,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> getRefreshTokenFromLocal() => (super.noSuchMethod(
        Invocation.method(
          #getRefreshTokenFromLocal,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> saveAccessTokenToLocal(String? accessToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAccessTokenToLocal,
          [accessToken],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> saveRefreshTokenToLocal(String? refreshToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveRefreshTokenToLocal,
          [refreshToken],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteAccessTokenFromLocal() => (super.noSuchMethod(
        Invocation.method(
          #deleteAccessTokenFromLocal,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteRefreshTokenFromLocal() => (super.noSuchMethod(
        Invocation.method(
          #deleteRefreshTokenFromLocal,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> getAndSaveAccessTokenFromRemote() => (super.noSuchMethod(
        Invocation.method(
          #getAndSaveAccessTokenFromRemote,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> getAndSaveRefreshTokenFromRemote() => (super.noSuchMethod(
        Invocation.method(
          #getAndSaveRefreshTokenFromRemote,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> attemptLogin() => (super.noSuchMethod(
        Invocation.method(
          #attemptLogin,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}
