// Mocks generated by Mockito 5.4.5 from annotations
// in flow_mobile/test/presentation/providers/transaction_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flow_mobile/domain/entities/transaction.dart' as _i4;
import 'package:flow_mobile/domain/usecases/transaction/create_transaction_usecase.dart'
    as _i5;
import 'package:flow_mobile/domain/usecases/transaction/delete_transaction_usecase.dart'
    as _i7;
import 'package:flow_mobile/domain/usecases/transaction/get_transactions_usecase.dart'
    as _i2;
import 'package:flow_mobile/domain/usecases/transaction/update_transaction_usecase.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetTransactionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTransactionsUseCase extends _i1.Mock
    implements _i2.GetTransactionsUseCase {
  MockGetTransactionsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Transaction>> execute(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [date],
        ),
        returnValue:
            _i3.Future<List<_i4.Transaction>>.value(<_i4.Transaction>[]),
      ) as _i3.Future<List<_i4.Transaction>>);

  @override
  _i3.Future<List<_i4.Transaction>> executeRange(
    DateTime? fromDate,
    DateTime? toDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeRange,
          [
            fromDate,
            toDate,
          ],
        ),
        returnValue:
            _i3.Future<List<_i4.Transaction>>.value(<_i4.Transaction>[]),
      ) as _i3.Future<List<_i4.Transaction>>);

  @override
  _i3.Future<List<_i4.Transaction>> executeAll() => (super.noSuchMethod(
        Invocation.method(
          #executeAll,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.Transaction>>.value(<_i4.Transaction>[]),
      ) as _i3.Future<List<_i4.Transaction>>);
}

/// A class which mocks [CreateTransactionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTransactionUseCase extends _i1.Mock
    implements _i5.CreateTransactionUseCase {
  MockCreateTransactionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute(_i4.Transaction? transaction) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [transaction],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [UpdateTransactionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTransactionUseCase extends _i1.Mock
    implements _i6.UpdateTransactionUseCase {
  MockUpdateTransactionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute(_i4.Transaction? transaction) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [transaction],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [DeleteTransactionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTransactionUseCase extends _i1.Mock
    implements _i7.DeleteTransactionUseCase {
  MockDeleteTransactionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> executeAll() => (super.noSuchMethod(
        Invocation.method(
          #executeAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
